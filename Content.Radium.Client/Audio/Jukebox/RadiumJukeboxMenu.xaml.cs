// SPDX-FileCopyrightText: 2024 Piras314 <p1r4s@proton.me>
// SPDX-FileCopyrightText: 2024 iNVERTED <alextjorgensen@gmail.com>
// SPDX-FileCopyrightText: 2024 metalgearsloth <31366439+metalgearsloth@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 Aiden <28298836+Aidenkrz@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 CybersunBot <cybersunbot@proton.me>
// SPDX-FileCopyrightText: 2025 SX-7 <sn1.test.preria.2002@gmail.com>
// SPDX-FileCopyrightText: 2025 XO6bl4 <49454110+XO6bl4@users.noreply.github.com>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

using Content.Radium.Shared.Audio.Jukebox;
using Content.Shared.Audio.Jukebox;
using Robust.Client.Audio;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Audio;
using Robust.Shared.Audio.Components;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;
using FancyWindow = Content.Client.UserInterface.Controls.FancyWindow;

namespace Content.Radium.Client.Audio.Jukebox;

[GenerateTypedNameReferences]
public sealed partial class RadiumJukeboxMenu : FancyWindow
{
    [Dependency] private readonly IEntityManager _entManager = null!;
    private readonly AudioSystem _audioSystem;

    /// <summary>
    /// Are we currently 'playing' or paused for the play / pause button.
    /// </summary>
    private bool _playState;

    /// <summary>
    /// True if playing, false if paused.
    /// </summary>
    public event Action<bool>? OnPlayPressed;

    public event Action? OnStopPressed;
    public event Action<ProtoId<JukeboxPrototype>>? OnSongSelected;
    public event Action<float>? SetTime;
    public event Action<float>? SetVolume;

    private EntityUid? _audio;

    private float _lockTimer;

    public RadiumJukeboxMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _audioSystem = _entManager.System<AudioSystem>();

        MusicList.OnItemSelected += args =>
        {
            var entry = MusicList[args.ItemIndex];

            if (entry.Metadata is not string jukebox)
                return;

            OnSongSelected?.Invoke(jukebox);
        };

        PlayButton.OnPressed += _ => OnPlayPressed?.Invoke(!_playState);

        StopButton.OnPressed += _ => OnStopPressed?.Invoke();

        PlaybackSlider.OnReleased += PlaybackSliderKeyUp;
        VolumeSlider.OnReleased += VolumeSliderKeyUp;

        SetPlayPauseButton(_audioSystem.IsPlaying(_audio), force: true);
    }

    public RadiumJukeboxMenu(AudioSystem audioSystem)
    {
        _audioSystem = audioSystem;
    }

    public void SetAudioStream(EntityUid? audio)
    {
        _audio = audio;
    }

    private void PlaybackSliderKeyUp(Slider args)
    {
        SetTime?.Invoke(PlaybackSlider.Value);
        _lockTimer = 0.5f;
    }

    private void VolumeSliderKeyUp(Slider args)
    {
        SetVolume?.Invoke(VolumeSlider.Value);
    }

    /// <summary>
    /// Re-populates the list of jukebox prototypes available.
    /// </summary>
    public void Populate(IEnumerable<JukeboxPrototype> jukeboxPrototypes)
    {
        MusicList.Clear();

        foreach (var entry in jukeboxPrototypes)
        {
            MusicList.AddItem(entry.Name, metadata: entry.ID);
        }
    }

    public void SetPlayPauseButton(bool isPlaying, bool force = false)
    {
        if (_playState == isPlaying && !force)
            return;

        _playState = isPlaying;

        PlayButton.Text = Loc.GetString(isPlaying ? "jukebox-menu-buttonpause" : "jukebox-menu-buttonplay");
    }

    public void SetSelectedSong(string name, float length)
    {
        SetSelectedSongText(name);
        PlaybackSlider.MaxValue = length;
        PlaybackSlider.SetValueWithoutEvent(0);
        VolumeSlider.SetValueWithoutEvent(50);
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (_lockTimer > 0f)
        {
            _lockTimer -= args.DeltaSeconds;
        }

        PlaybackSlider.Disabled = _lockTimer > 0f;

        DurationLabel.Text = _entManager.TryGetComponent(_audio, out AudioComponent? audio)
            ? $@"{TimeSpan.FromSeconds(audio.PlaybackPosition):mm\:ss} / {_audioSystem.GetAudioLength(_audioSystem.ResolveSound(new SoundPathSpecifier(audio.FileName))):mm\:ss}"
            : "00:00 / 00:00";

        if (PlaybackSlider.Grabbed)
            return;

        if (audio != null || _entManager.TryGetComponent(_audio, out audio))
        {
            PlaybackSlider.SetValueWithoutEvent(audio.PlaybackPosition);
        }
        else
        {
            PlaybackSlider.SetValueWithoutEvent(0f);
        }

        SetPlayPauseButton(_audioSystem.IsPlaying(_audio, audio));
    }

    public void SetSelectedSongText(string? text)
    {
        SongName.Text = !string.IsNullOrEmpty(text) ? text : "---";
    }
}
