// SPDX-FileCopyrightText: 2025 CybersunBot <cybersunbot@proton.me>
// SPDX-FileCopyrightText: 2025 freeze2222 <opop1094@gmail.com>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

using System.Linq;
using Content.Client.Decals.UI;
using Content.Client.Paper.UI;
using Content.Radium.Common.CCVar;
using Content.Radium.Shared.Stamps.UI;
using Content.Shared.Paper;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Utility;

namespace Content.Radium.Client.Stamps;

[GenerateTypedNameReferences]
public sealed partial class StampCustomizationMenu : DefaultWindow
{
    [Dependency] private readonly IConfigurationManager _configuration = null!;

    private PaletteColorPicker? _picker;
    private int _maxTextLength;
    public Color Color = Color.White;
    public string Text = "";

    public event Action? OnApply;

    public StampCustomizationMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        ColorPicker.OnColorChanged += OnColorPicked;
        TextField.Placeholder = new Rope.Leaf(Loc.GetString("stamp-customization-window-text-placeholder"));

        PickerOpen.OnPressed += _ => OnPickerOpened();
        ApplyButton.OnPressed += _ => OnApply?.Invoke();
        TextField.OnTextChanged += OnTextChanged;

        _maxTextLength = _configuration.GetCVar(RadiumCVars.StampsMaxTextLength);
        _configuration.OnValueChanged(RadiumCVars.StampsMaxTextLength, value => { _maxTextLength = value; });

        UpdateStampInfo();
    }

    private void OnPickerOpened()
    {
        if (_picker is null)
        {
            _picker = new PaletteColorPicker();
            _picker.OpenToLeft();
            _picker.PaletteList.OnItemSelected += args =>
            {
                var color = (args.ItemList.GetSelected().First().Metadata as Color?)!.Value;
                ColorPicker.Color = color;
                OnColorPicked(color);
            };
        }
        else
        {
            if (_picker.IsOpen)
            {
                _picker.Close();
            }
            else
            {
                _picker.Open();
            }
        }
    }

    private void OnColorPicked(Color color)
    {
        Color = color;
        UpdateStampInfo();
    }

    private void OnTextChanged(TextEdit.TextEditEventArgs args)
    {
        var newValue = Rope.Collapse(args.TextRope);
        if (newValue.Length > _maxTextLength)
        {
            return;
        }

        Text = newValue;
        UpdateStampInfo();
    }

    private void UpdateStampInfo()
    {
        StampDisplay.RemoveAllChildren();
        StampDisplay.RemoveStamps();
        var stampInfo = new StampDisplayInfo
        {
            StampedName = Text,
            StampedColor = Color,
        };
        StampDisplay.AddStamp(new StampWidget
        {
            StampInfo = stampInfo,
        });
    }

    public void UpdateState(CustomizableStampBoundUserInterfaceState state)
    {
        Color = state.Color;
        Text = state.Text;
        UpdateStampInfo();
    }
}
